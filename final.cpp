#line 1 "final.cpp"

#line 3 "final.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[262] =
    {   0,
        0,    0,   76,   76,   97,   97,    0,    0,   84,   84,
      105,  105,   69,   69,   90,   90,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  111,  109,
       30,  109,   92,    1,  100,   52,   51,   55,   57,   48,
       58,   45,   56,   28,    2,   49,   46,   50,   47,   29,
       29,   29,   53,   54,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   72,  110,  110,   76,
       93,   99,  110,   97,  110,   40,   31,   41,   42,   80,
      110,  110,   84,  101,  107,  110,  105,   67,   68,   67,
       89,   88,   89,   33,   32,   37,   36,   35,   34,   39,

       38,  108,    0,    0,    0,    1,    1,    1,    0,   64,
       62,   59,   63,    0,   28,   44,   29,   29,   29,   65,
       29,   11,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   18,   29,   14,    4,   29,   29,   29,   29,   29,
       29,   72,    0,   74,   77,    0,   73,   76,   93,   95,
       98,    0,   94,   97,   40,   41,   42,   80,    0,   82,
       85,    0,   81,   84,  101,  103,  106,    0,  102,  105,
       67,    0,   67,   89,    0,   89,   32,   36,    0,    0,
       66,    1,    1,   87,   43,   61,   29,   29,    5,   29,
       29,   29,   19,   29,   29,   29,   29,   20,   29,   29,

       29,   29,   29,   29,   29,   10,   29,   78,   75,   96,
       86,   83,  104,   70,   91,   71,   79,   66,   66,    1,
        1,   87,   60,   29,    7,   29,   29,   29,    3,   17,
       29,   29,   24,   29,   29,   26,   29,   29,   29,   29,
        8,   25,    6,   29,   29,   29,   29,   16,   21,   13,
       29,   22,   29,    9,   29,   23,   15,   29,   12,   27,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,    1,   22,   22,   22,   23,   23,   24,
       22,   22,   22,   22,   23,   22,   22,   22,   23,   22,
       22,   23,   22,   25,   22,   22,   23,   22,   23,   22,
       26,   27,   28,    1,   22,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   22,   38,   39,   40,   41,
       42,   43,   22,   44,   45,   46,   47,   22,   48,   49,
       50,   22,   51,    2,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    1,    6,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1
    } ;

static const flex_int16_t yy_base[282] =
    {   0,
        0,    0,   47,   48,   49,   50,   54,   63,   54,   57,
       66,   73,   73,   78,   79,   80,    0,    0,  101,  105,
      107,  109,  112,  114,  116,  118,  523,  522,  525,   87,
      673,  673,   92,  118,  121,  127,  131,  132,  135,  136,
      140,  144,  145,  149,  673,  150,  153,  504,  154,  157,
      161,  162,  165,  166,  169,  172,  173,  176,  179,  180,
      189,  188,  192,  198,  193,  197,    0,  517,  208,  480,
        0,  673,  235,  479,  673,  237,  673,    0,  503,    0,
      511,  240,  476,    0,  673,  241,  469,    0,  501,  169,
        0,  495,  202,  673,  494,  673,  482,  673,  673,  673,

      673,  673,  477,  467,  448,    0,  436,  416,  409,  402,
      379,  373,  364,  343,  236,  334,  249,  250,  253,  324,
      254,  258,  259,  264,  265,  268,  272,  273,  278,  283,
      289,  290,  294,  298,  303,  306,  307,  311,  315,  316,
      319,    0,  324,  673,  673,  266,  673,  257,    0,  673,
      673,  250,  673,  243,  326,    0,  258,    0,  244,  673,
      673,  201,  673,  193,    0,  673,  673,  185,  673,  178,
        0,  196,  264,    0,  175,  302,  171,  140,  128,  120,
      184,  101,   78,  335,   66,   48,  331,  338,  341,  350,
      342,  353,  357,  358,  362,  363,  368,  367,  373,  376,

      377,  381,  384,  393,  396,  397,  400,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  203,  328,    0,
        0,  389,   39,  401,  404,  407,  410,  414,  415,  422,
      425,  426,  430,  431,  435,  439,  442,  443,  447,  451,
      452,  455,  456,  459,  462,  465,  466,  472,  473,  478,
      482,  485,  488,  489,  492,  496,  500,  504,  508,  509,
      673,  542,  549,  556,  563,  570,  577,  584,  591,  598,
      605,  612,  619,  624,  631,  636,  641,  648,  653,  658,
      665
    } ;

static const flex_int16_t yy_def[282] =
    {   0,
      261,    1,  262,  262,  263,  263,  264,  264,  265,  265,
      266,  266,  267,  267,  268,  268,  264,  264,  269,  269,
      270,  270,  271,  271,  272,  272,  264,  264,  261,  261,
      261,  261,  261,  273,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  274,
      274,  274,  261,  261,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  275,  261,  261,  261,
      276,  261,  261,  261,  261,  261,  261,  277,  261,  278,
      261,  261,  261,  279,  261,  261,  261,  280,  261,  280,
      281,  261,  281,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  273,  273,  273,  261,  261,
      261,  261,  261,  261,  261,  261,  274,  274,  274,  261,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  275,  261,  261,  261,  261,  261,  261,  276,  261,
      261,  261,  261,  261,  261,  277,  261,  278,  261,  261,
      261,  261,  261,  261,  279,  261,  261,  261,  261,  261,
      280,  261,  280,  281,  261,  281,  261,  261,  261,  261,
      261,  273,  273,  261,  261,  261,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  273,
      273,  261,  261,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
        0,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261
    } ;

static const flex_int16_t yy_nxt[725] =
    {   0,
       30,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   50,   51,   52,   53,   30,   54,   55,   56,
       57,   58,   59,   60,   50,   50,   61,   50,   50,   50,
       50,   62,   63,   64,   50,   65,   50,   66,   50,   50,
       30,   68,   68,   72,   72,   76,   77,   76,  186,   78,
       81,   76,   76,   81,   76,   77,   76,  223,   78,   79,
       76,   76,   85,   69,   69,   73,   73,   89,   79,   85,
       82,  185,   89,   82,  221,   92,   92,   70,   70,   74,
       74,  103,   86,  104,   83,   90,  105,   83,  104,   86,

       90,   93,   93,   75,   95,  220,   87,   75,   95,   75,
       97,   75,   97,   87,   75,   99,   75,   99,   75,  101,
       75,  101,  107,   90,  108,  103,  217,  109,   90,   93,
       93,  103,  216,  104,  110,  103,  103,  104,  104,  103,
      103,  104,  104,  178,  103,  111,  104,  112,  103,  103,
      104,  104,  113,  103,  103,  104,  104,  103,  103,  104,
      104,  103,  114,  104,  115,  103,  103,  104,  104,  103,
      103,  104,  104,  103,  177,  104,  103,  103,  104,  104,
      103,  215,  104,  103,  103,  104,  104,  218,  219,  118,
      120,  173,  103,  103,  104,  104,  103,  103,  104,  104,

      214,  103,  103,  104,  104,  119,  218,  218,  126,  121,
      144,  124,  145,  122,  125,  123,  129,  127,  170,  173,
      136,  130,  132,  131,  176,  213,  138,  128,  133,  134,
      139,  135,  141,  164,  146,  137,  140,  150,  155,  151,
      155,  212,  160,  166,  155,  155,  161,  167,  147,  114,
      211,  115,  176,  261,  261,  261,  261,  261,  261,  261,
      261,  152,  261,  261,  261,  261,  162,  168,  261,  261,
      261,  261,  261,  157,  261,  153,  261,  261,  261,  261,
      163,  169,  261,  154,  261,  189,  173,  261,  187,  261,
      210,  190,  191,  261,  261,  261,  261,  148,  261,  188,

      261,  193,  261,  196,  261,  192,  209,  261,  194,  261,
      261,  261,  261,  261,  173,  261,  195,  261,  197,  261,
      261,  261,  261,  261,  176,  261,  198,  155,  208,  155,
      199,  218,  218,  155,  155,  261,  200,  261,  222,  222,
      201,  217,  261,  203,  261,  261,  261,  261,  261,  120,
      202,  204,  176,  186,  261,  207,  261,  261,  185,  261,
      205,  261,  261,  261,  261,  206,  261,  261,  261,  261,
      225,  261,  261,  261,  261,  224,  113,  261,  226,  261,
      261,  261,  261,  261,  112,  261,  227,  261,  261,  111,
      261,  229,  222,  222,  230,  231,  232,  261,  228,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  110,
      261,  261,  233,  261,  261,  184,  261,  234,  261,  261,
      261,  261,  183,  235,  237,  236,  261,  238,  261,  261,
      261,  261,  261,  241,  261,  261,  261,  261,  240,  261,
      182,  261,  239,  261,  242,  261,  261,  261,  261,  261,
      244,  261,  181,  261,  243,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  246,  261,  261,  245,  261,  261,
      261,  261,  261,  180,  247,  250,  261,  261,  261,  261,
      248,  179,  261,  252,  261,  178,  261,  249,  261,  261,
      251,  261,  261,  261,  261,  261,  261,  177,  261,  253,

      261,  175,  261,  255,  261,  172,  261,  254,  261,  170,
      261,  256,  261,  261,  261,  261,  164,  159,  157,  154,
      148,  143,  257,  116,  261,  102,  102,  261,  261,  261,
      261,  261,  261,  261,  258,  261,  260,  261,  261,  261,
      261,  259,   67,   67,   67,   67,   67,   67,   67,   71,
       71,   71,   71,   71,   71,   71,   75,   75,   75,   75,
       75,   75,   75,   80,   80,   80,   80,   80,   80,   80,
       84,   84,   84,   84,   84,   84,   84,   88,   88,   88,
       88,   88,   88,   88,   91,   91,   91,   91,   91,   91,
       91,   94,   94,   94,   94,   94,   94,   94,   96,   96,

       96,   96,   96,   96,   96,   98,   98,   98,   98,   98,
       98,   98,  100,  100,  100,  100,  100,  100,  100,  106,
      261,  106,  106,  106,  106,  106,  117,  117,  117,  261,
      117,  142,  142,  261,  142,  142,  149,  149,  261,  149,
      149,  156,  261,  156,  156,  156,  156,  156,  158,  158,
      158,  261,  158,  165,  165,  165,  261,  165,  171,  171,
      261,  171,  171,  171,  171,  174,  174,  174,  261,  174,
      174,  174,   29,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261
    } ;

static const flex_int16_t yy_chk[725] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    7,    7,    7,  223,    7,
        9,    7,    7,   10,    8,    8,    8,  186,    8,    7,
        8,    8,   11,    3,    4,    5,    6,   13,    8,   12,
        9,  185,   14,   10,  183,   15,   16,    3,    4,    5,
        6,   30,   11,   30,    9,   13,   33,   10,   33,   12,

       14,   15,   16,   19,   19,  182,   11,   20,   20,   21,
       21,   22,   22,   12,   23,   23,   24,   24,   25,   25,
       26,   26,   34,   13,   34,   35,  180,   35,   14,   15,
       16,   36,  179,   36,   36,   37,   38,   37,   38,   39,
       40,   39,   40,  178,   41,   39,   41,   40,   42,   43,
       42,   43,   41,   44,   46,   44,   46,   47,   49,   47,
       49,   50,   44,   50,   44,   51,   52,   51,   52,   53,
       54,   53,   54,   55,  177,   55,   56,   57,   56,   57,
       58,  175,   58,   59,   60,   59,   60,  181,  181,   51,
       53,   90,   62,   61,   62,   61,   63,   65,   63,   65,

      172,   66,   64,   66,   64,   52,  218,  218,   58,   55,
       69,   57,   69,   55,   57,   56,   60,   59,  170,   90,
       63,   60,   61,   60,   93,  168,   64,   59,   61,   61,
       64,   62,   66,  164,   69,   63,   65,   73,   76,   73,
       76,  162,   82,   86,   76,   76,   82,   86,   69,  115,
      159,  115,   93,  117,  118,  117,  118,  119,  121,  119,
      121,   73,  122,  123,  122,  123,   82,   86,  124,  125,
      124,  125,  126,  157,  126,   73,  127,  128,  127,  128,
       82,   86,  129,  154,  129,  121,  173,  130,  118,  130,
      152,  123,  124,  131,  132,  131,  132,  148,  133,  119,

      133,  126,  134,  128,  134,  125,  146,  135,  127,  135,
      136,  137,  136,  137,  173,  138,  127,  138,  129,  139,
      140,  139,  140,  141,  176,  141,  130,  155,  143,  155,
      131,  219,  219,  155,  155,  187,  133,  187,  184,  184,
      134,  184,  188,  137,  188,  189,  191,  189,  191,  120,
      136,  138,  176,  116,  190,  141,  190,  192,  114,  192,
      139,  193,  194,  193,  194,  140,  195,  196,  195,  196,
      188,  198,  197,  198,  197,  187,  113,  199,  190,  199,
      200,  201,  200,  201,  112,  202,  191,  202,  203,  111,
      203,  194,  222,  222,  195,  196,  197,  204,  192,  204,

      205,  206,  205,  206,  207,  224,  207,  224,  225,  110,
      225,  226,  199,  226,  227,  109,  227,  200,  228,  229,
      228,  229,  108,  201,  203,  202,  230,  204,  230,  231,
      232,  231,  232,  224,  233,  234,  233,  234,  207,  235,
      107,  235,  205,  236,  226,  236,  237,  238,  237,  238,
      228,  239,  105,  239,  227,  240,  241,  240,  241,  242,
      243,  242,  243,  244,  232,  244,  245,  231,  245,  246,
      247,  246,  247,  104,  234,  238,  248,  249,  248,  249,
      235,  103,  250,  240,  250,   97,  251,  237,  251,  252,
      239,  252,  253,  254,  253,  254,  255,   95,  255,  244,

      256,   92,  256,  246,  257,   89,  257,  245,  258,   87,
      258,  247,  259,  260,  259,  260,   83,   81,   79,   74,
       70,   68,  251,   48,   29,   28,   27,    0,    0,    0,
        0,    0,    0,    0,  253,    0,  258,    0,    0,    0,
        0,  255,  262,  262,  262,  262,  262,  262,  262,  263,
      263,  263,  263,  263,  263,  263,  264,  264,  264,  264,
      264,  264,  264,  265,  265,  265,  265,  265,  265,  265,
      266,  266,  266,  266,  266,  266,  266,  267,  267,  267,
      267,  267,  267,  267,  268,  268,  268,  268,  268,  268,
      268,  269,  269,  269,  269,  269,  269,  269,  270,  270,

      270,  270,  270,  270,  270,  271,  271,  271,  271,  271,
      271,  271,  272,  272,  272,  272,  272,  272,  272,  273,
        0,  273,  273,  273,  273,  273,  274,  274,  274,    0,
      274,  275,  275,    0,  275,  275,  276,  276,    0,  276,
      276,  277,    0,  277,  277,  277,  277,  277,  278,  278,
      278,    0,  278,  279,  279,  279,    0,  279,  280,  280,
        0,  280,  280,  280,  280,  281,  281,  281,    0,  281,
      281,  281,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "final.l"
#line 2 "final.l"
#pragma warning (disable: 4005)
#include "grammar.hpp"
#include "python_ast_node.hpp"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>
#include <string.h>
#include <cmath>
#define N 1000
using namespace std;
extern int yylex();
int lno=1;
int top = -1;
int flag2=0;
int flag=0;
int stack[N];
void push(int elem);     
int pop(); 
bool isEmpty();
int peek();
int numberOfspaceinline=0;
#line 790 "final.cpp"

#line 41 "final.l"
char* string_literal_value = NULL;

#line 795 "final.cpp"
/* Regular expressions to match tokens */
#line 797 "final.cpp"

#define INITIAL 0
#define STRING1 1
#define STRING2 2
#define INDENTAITONN 3
#define ANOTHER_STRING_WITH_SINGLE 4
#define ANOTHER_STRING_WITH_SINGLE2 5
#define MULTILINE_COMMENT 6
#define MULTILINE_COMMENT2 7
#define LIST 8
#define STIND 9
#define STINDD 10
#define DENT 11
#define DENTT 12
#define ENDSTATE 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 96 "final.l"




#line 1032 "final.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 262 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 673 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 100 "final.l"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 104 "final.l"
{

				BEGIN(INDENTAITONN);
				return COLON;
				 
				
              } 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 112 "final.l"
{       
                                 
															
															flag2 = true;
															return ELIF;
															
															
														}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "final.l"
{       
                                 
															

															return OR;
															
															
														}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 128 "final.l"
{       
                                 
															
															
															return AND;
															
															
														}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "final.l"
{       
                                 
															
															
															return CLASS;
															
															
														}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 145 "final.l"
{       
                                   
															
															flag2 = true;
															yylval.astNode = new IdentifierNode("BOOLIAN", "boolian", yytext);
															return TRUE;
															
															
														
														}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 155 "final.l"
{       


                                 
														
															flag2 = true; 
															yylval.astNode = new IdentifierNode("BOOLIAN", "boolian", yytext);
															return FALSE;
														
															
														}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 167 "final.l"
{       


                                 
															
															flag2 = true;
															return EXCEPT;
														
															
														}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 178 "final.l"
{       


																
															flag2 = true;
															return TRY;
														
														
														}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 188 "final.l"
{       


																
															flag2 = true;
															yylval.astNode = new IdentifierNode("AS", "as", yytext);
															return AS;
														
														
														}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 198 "final.l"
{       


																
															flag2 = true;
															return FINALLY;
														
														
														}																												
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 207 "final.l"
{       


																
															flag2 = true;
															yylval.astNode = new IdentifierNode("RANGE", "RANGE_Stmt", yytext);
															return RANGE;
														
														
														}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 218 "final.l"
{       


																
															flag2 = true;
															return IN;
														
														
														}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 227 "final.l"
{       


                                   
	
															flag2 = true;
															yylval.astNode = new IdentifierNode("RETURN", "return", yytext);
															return RETURN;
															
															
														}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 238 "final.l"
{       


                                  
															
															flag2 = true;
															return INPUT;
															
														}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 247 "final.l"
{       


                                
															
															flag2 = true;
															return ELSE;
														
															
														}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 257 "final.l"
{       


                                  
														
															flag2 = true;
															return IF;
													
															
														}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 267 "final.l"
{       


                                  
															
															flag2 = true;
															return DEF;
											
															
														}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 277 "final.l"
{       


                                  
															
															flag2 = true;
															return FOR;
															
															
														}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 287 "final.l"
{       


                                   
															
															flag2 = true;
															return PRINT;
														
															
														}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 297 "final.l"
{       


                                  
														
															flag2 = true;
															return WHILE;
													
															
														}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 307 "final.l"
{		
							               yylval.astNode = new IdentifierNode("IMPORT", "import", yytext);
											return IMPORT;
									}	
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 311 "final.l"
{		
							              yylval.astNode = new IdentifierNode("FROM", "from", yytext);
											return FROM;
									}										
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 316 "final.l"
{       


                                  
														
															flag2 = true;
															yylval.astNode = new IdentifierNode("BREAK", "BREAK_Stmt", yytext);
															return BREAK;
													
															
														}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 327 "final.l"
{       


                                  
														
															flag2 = true;
															yylval.astNode = new IdentifierNode("PASS", "PASS_Stmt", yytext);
															return PASS;
													
															
														}														
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 338 "final.l"
{       


                                  
														
															flag2 = true;
															yylval.astNode = new IdentifierNode("CONTINUE", "CONTINUE_Stmt", yytext);
															return CONTINUE;
													
															
														}																												
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 349 "final.l"
{	
													yylval.astNode = new NumberNode("NUMBER", "Integer", atoi(yytext));
													return NUMBER;
													}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 354 "final.l"
{ 
								 
												
												yylval.astNode = new IdentifierNode("IDENTIFIER", "Identifier", yytext);
												return IDENTIFIER;
												
													
											}	
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 362 "final.l"
{
	lno++;
	flag2 =false;
	numberOfspaceinline=0;		
	
	BEGIN(STINDD);
	
	return NEWLINE;
										
	
}              
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 375 "final.l"
{
				numberOfspaceinline=0;
				flag2=false;
				
				BEGIN(STIND);
				return NEWLINE;
				
			
						}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 385 "final.l"
{
		int rr = 1 ;
		int i=0;
  					  do{
							 if(yytext[i]==' '){
    			  		  numberOfspaceinline++;
   							 }
   							 i++;
						}while(i<=yytext[i]);

							if (flag)
							numberOfspaceinline--;
								flag=0 ;
							 	if (peek()>numberOfspaceinline){
							 		
										BEGIN(DENT) ;
										rr=0 ;
    									
											}else if (peek()<numberOfspaceinline && numberOfspaceinline!=0){
												push(numberOfspaceinline);

												return INDENTAITON;
												
										
    								
	}
	if (rr==1)
	BEGIN(INITIAL);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 414 "final.l"
{
	flag=1;
	unput(*yytext);
	unput(' ');
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 421 "final.l"
{
		int pp=1 ;
							if(peek()>numberOfspaceinline){
    										pop();
    										
    										pp=0;
    										return DENTAITON;
    										
    									
    										
    											}else 
    											if (peek()!=numberOfspaceinline){
    												
    												return 0;
    											}
    							if(pp==1)
    							BEGIN(INITIAL);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 439 "final.l"
{

	unput(*yytext);
	unput(' ');
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 445 "final.l"
{
		int rr = 1 ;
		int i=0;
  					  do{
							 if(yytext[i]==' '){
    			  		  numberOfspaceinline++;
   							 }
   							 i++;
						}while(i<=yytext[i]);

							if (flag)
							numberOfspaceinline--;
								flag=0 ;

							 	if (peek()>numberOfspaceinline){
							 		
										BEGIN(DENTT) ;
										rr=0 ;
    									
											}else if (peek()<numberOfspaceinline && numberOfspaceinline!=0){
												push(numberOfspaceinline);

												return INDENTAITON;
											
    								
	}
	if (rr==1)
	BEGIN(INITIAL);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 474 "final.l"
{
	flag=1;
	unput(*yytext);
	unput(' ');
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 480 "final.l"
{
		int pp=1 ;
							if(peek()>numberOfspaceinline){
    										pop();
    										
    										pp=0;
    										return DENTAITON;
    									
    									
    										
    											}else
    											
    											if (peek()!=numberOfspaceinline){
    												
    												return 0;
    											}
    							if(pp==1)
    							BEGIN(INITIAL);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 500 "final.l"
{
	unput(*yytext);
	unput(' ');
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 504 "final.l"
{
						
						

						}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 510 "final.l"
{
						
						
						
						}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 516 "final.l"
{
	                    yylval.astNode = new NumberNode("NUMBER", "Integer", atoi(yytext));
						return NUMBER;
						
						}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 529 "final.l"
{
	                             yylval.astNode = new NumberNode("NUMBER", "Float", atoi(yytext));
                                 return DECIMAL;	
							 
										 }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 535 "final.l"
{		
							 
											flag2=true;
											return EQUAL;
									}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 543 "final.l"
{		
							 
			
											return DOT;
									}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 550 "final.l"
{		
							 
											flag2=true;
											return LESSTHAN;
								}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 555 "final.l"
{			
							 
											flag2=true;
											return GREATERTHAN;
									}											
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 561 "final.l"
{			
							 
											flag2=true;
											return COMMA;
									}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 568 "final.l"
{			
							 
											flag2=true;
											return SEMICOLON;
									}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 574 "final.l"
{			
							 
											flag2=true;
											return ASSIGN;
										}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 579 "final.l"
{	
							 
											flag2=true;
											return RBRACKET;
											}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 584 "final.l"
{	
 
											flag2=true;
											return LBRACKET;
											}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 589 "final.l"
{	
 
											flag2=true;
											return SQUAREBL;
											}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 594 "final.l"
{	
 
											flag2=true;
											return SQUAREBR;
											}																						
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 600 "final.l"
{			
							 
											flag2=true;
											return MUL;
											}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 605 "final.l"
{			
							 
											flag2=true;
											return DIVIDE;
											}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 611 "final.l"
{		
							 
											flag2=true;
											return PLUS;
											}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 616 "final.l"
{			
							 
											flag2=true;
											return MINUS;
											}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 622 "final.l"
{     	
							 
	                   flag2 =true;
	                   return COMMA;
	                   
	              
                       }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 630 "final.l"
{     		
							 
	                   flag2 =true;
	                   return EQUAL;
	                 
	              
                       }                    
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 638 "final.l"
{     		
							 
	                   flag2 =true;
	                   return ASSIGN;
	                   
	              
                       }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 647 "final.l"
{     	
							 
	                   flag2 =true;
	                   return PLUS;
	                   	
	              
                       } 
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 654 "final.l"
{     	
							 
	                   flag2 =true;
	                   return MINUS;
	                  
	              
                       } 
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 661 "final.l"
{     		
							 
	                   flag2 =true;
	                   return LBRACKET;
	              
	              
                       } 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 668 "final.l"
{     		
							 
	                   flag2 =true;
	                   return SQUAREBL;
	              
	              
                       }                        
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 677 "final.l"
{
	 						if(flag2 == true){
    						BEGIN(STRING1);  // Transition to the STRING start condition when a double quote is encountered
    						string_literal_value = strdup("");  // Initialize the string literal value
			        		}else {
    				                         BEGIN(MULTILINE_COMMENT);  // Transition to the STRING start condition when a double quote is encountered
    				                         string_literal_value = strdup("");  // Initialize the string literal value
			                       }             }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 685 "final.l"
{
    				  string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				  strcat(string_literal_value, yytext);
			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 691 "final.l"
{

                                         } 
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 696 "final.l"
{string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
					     strcat(string_literal_value, yytext);  
					         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 702 "final.l"
{
									
    				                   BEGIN(INITIAL);  // Return to the initial start condition when a closing double quote is encountered
    				                  	
    				                  
			                                 }                       
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 712 "final.l"
{
                    if(flag2 == true){
    				BEGIN(STRING1);  // Transition to the STRING start condition when a double quote is encountered
    				string_literal_value = strdup("");  // Initialize the string literal value
			        }
			}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 720 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				strcat(string_literal_value, yytext);
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 726 "final.l"
{string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
					strcat(string_literal_value, "\n");  
					}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 730 "final.l"
{
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 733 "final.l"
{
                     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\\n");  // Handle escaped double quote
                     }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 738 "final.l"
{
    				     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				      strcat(string_literal_value, yytext);
			          }                     
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 743 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\"");  // Handle escaped double quote
			        }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 747 "final.l"
{
    				BEGIN(INITIAL);  // Return to the initial start condition when a closing double quote is encountered
    				flag2 == false;

    				yylval.astNode = new StringNode("STRING_LITERAL", "STRING", string_literal_value);
    				return STRING_LITERAL;
    				
    				
			       }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 761 "final.l"
{
	 			if(flag2 == true){
    				BEGIN(ANOTHER_STRING_WITH_SINGLE);  // Transition to the STRING start condition when a double quote is encountered
    				string_literal_value = strdup("");  // Initialize the string literal value
			}}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 769 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				strcat(string_literal_value, yytext);
			}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 775 "final.l"
{string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
					strcat(string_literal_value, "\n");  
					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 778 "final.l"
{
					}					
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 783 "final.l"
{
                     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\\n");  // Handle escaped double quote
                     }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 788 "final.l"
{
    				     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				      strcat(string_literal_value, yytext);
			          }                    
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 795 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\"");  // Handle escaped double quote
			        }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 799 "final.l"
{
    			                   	BEGIN(INITIAL);  // Return to the initial start condition when a closing double quote is encountered
    			                   	yylval.astNode = new StringNode("STRING_LITERAL", "STRING", string_literal_value);
    				                 return STRING_LITERAL;
    				               	
			                            }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 818 "final.l"
{
												if(flag2 == true){
    												BEGIN(ANOTHER_STRING_WITH_SINGLE);  // Transition to the STRING start condition when a double quote is encountered
    												string_literal_value = strdup("");  // Initialize the string literal value
			        							}else {
    				                         BEGIN(MULTILINE_COMMENT2);  // Transition to the STRING start condition when a double quote is encountered
    				                         string_literal_value = strdup("");  // Initialize the string literal value
			                       }            

			                                    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 829 "final.l"
{

                                         } 
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 832 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				strcat(string_literal_value, yytext);
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 838 "final.l"
{string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
					     strcat(string_literal_value, yytext);  
					         }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 844 "final.l"
{
    				                   BEGIN(INITIAL);  // Return to the initial start condition when a closing double quote is encountered
    				                  
    				               
			                                 }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 853 "final.l"
{       if(flag2 == true){
    				BEGIN(STRING2);  // Transition to the STRING start condition when a double quote is encountered
    				string_literal_value = strdup("");  // Initialize the string literal value
			        }
			}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 860 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				strcat(string_literal_value, yytext);
			}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 866 "final.l"
{string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
					strcat(string_literal_value, "\n");  
					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 870 "final.l"
{
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 873 "final.l"
{
                     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\\n");  // Handle escaped double quote
                     }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 878 "final.l"
{
    				     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				      strcat(string_literal_value, yytext);
			          }                     
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 883 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\"");  // Handle escaped double quote
			        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 887 "final.l"
{
    				BEGIN(INITIAL);  // Return to the initial start condition when a closing double quote is encountered
    				flag2 == false;
    				yylval.astNode = new StringNode("STRING_LITERAL", "STRING", string_literal_value);
    				return STRING_LITERAL;
    					
			       }	
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 896 "final.l"
{
    				BEGIN(ANOTHER_STRING_WITH_SINGLE2);  // Transition to the STRING start condition when a double quote is encountered
    				string_literal_value = strdup("");  // Initialize the string literal value
			}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 903 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				strcat(string_literal_value, yytext);
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 909 "final.l"
{string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
					strcat(string_literal_value, "\n");  
					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 912 "final.l"
{
					}					
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 917 "final.l"
{
                     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\\n");  // Handle escaped double quote
                     }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 922 "final.l"
{
    				     string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + yyleng + 1);
    				      strcat(string_literal_value, yytext);
			          }                    
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 929 "final.l"
{
    				string_literal_value = (char*)realloc(string_literal_value, strlen(string_literal_value) + 1);
    				strcat(string_literal_value, "\"");  // Handle escaped double quote
			        }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 933 "final.l"
{
    			                   	BEGIN(INITIAL);  // Return to the initial start condition when a closing double quote is encountered
    			                   	yylval.astNode = new StringNode("STRING_LITERAL", "STRING", string_literal_value );
    				                return STRING_LITERAL;
    				                 
			                            }	
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING1):
case YY_STATE_EOF(STRING2):
case YY_STATE_EOF(INDENTAITONN):
case YY_STATE_EOF(ANOTHER_STRING_WITH_SINGLE):
case YY_STATE_EOF(ANOTHER_STRING_WITH_SINGLE2):
case YY_STATE_EOF(MULTILINE_COMMENT):
case YY_STATE_EOF(MULTILINE_COMMENT2):
case YY_STATE_EOF(LIST):
case YY_STATE_EOF(STIND):
case YY_STATE_EOF(STINDD):
case YY_STATE_EOF(DENT):
case YY_STATE_EOF(DENTT):
case YY_STATE_EOF(ENDSTATE):
#line 941 "final.l"
{
if (!isEmpty()){
	unput(' ');
	BEGIN(ENDSTATE);

}else 
yyterminate();

}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 950 "final.l"
{
	
	
	if (!isEmpty()){
		pop();
		unput(' ');
		return DENTAITON ;
		
	}else {
		yyterminate();
	}
	
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 965 "final.l"
{
    		
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 971 "final.l"
ECHO;
	YY_BREAK
#line 2293 "final.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 262 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 262 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 261);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 971 "final.l"


void push(int elem){
    // Checking overflow state
    if(top == N-1)
        printf("Overflow State: can't add more elements into the stack\n");
    else{
        int x;
        top+=1;
        stack[top] = elem;
    }
}

int pop(){
    // Checking underflow state
    if(top == -1)
        printf("Underflow State: Stack already empty, can't remove any element\n");
    else{
        int x = stack[top];
       
        top-=1;
        return x;
    }
    return -1;
}


bool isEmpty(){
    if(top == -1){
        
        return true;
    }
    
    return false;
}
int peek(){
    int x = stack[top];
   
    return x;
}
